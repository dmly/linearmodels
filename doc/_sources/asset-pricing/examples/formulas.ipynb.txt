{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Formulas\n",
    "\n",
    "The asset pricing model estimators all all formulas.  Since the models have multiple depedent variables (test portfolios) as well as multiple independent variables (factors), the standard Patsy syntax needs to be modified. There are two methods to use formulas.  The first specified both the test portfolio and the factors.  The secondspecified only the factors and the test portfolios are passed using an optional keyword argument. The second syntax exists since in many models the number of test portfolios might be large and interest is usually in modifying the factors.\n",
    "\n",
    "## Test Portfolios and Factors\n",
    "\n",
    "The first syntax can be expressed as\n",
    "\n",
    "```\n",
    "'port1 + port2 + port3 + port4 + ... + portN ~ factor1 + ... + factorK'\n",
    "```\n",
    "\n",
    "so that both the test portfolios and the factors are separated using `+`.  The two sets are separated using the usual separator between LFS and RHS variables, `~`.\n",
    "\n",
    "## Factors Only\n",
    "\n",
    "The second syntax specifies only factors and uses the keyword argument `portfolios` to pass the matrix of portfolio returns.\n",
    "\n",
    "```\n",
    "formula = 'factor1 + ... + factorK'\n",
    "LinearFactorModel.from_formula(formula, portfolios=portfolios)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Data from Ken French's data library\n",
      "http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html\n",
      "\n",
      "dates    Year and Month of Return\n",
      "MktRF    Market Factor\n",
      "SMB      Size Factor\n",
      "HML      Value Factor\n",
      "Mom      Momentum Factor\n",
      "RF       Risk-free rate\n",
      "NoDur    Industry: Non-durables\n",
      "Durbl    Industry: Durables\n",
      "Manuf    Industry: Manufacturing\n",
      "Enrgy    Industry: Energy\n",
      "Chems    Industry: Chemicals\n",
      "BusEq    Industry: Business Equipment\n",
      "Telcm    Industry: Telecoms\n",
      "Utils    Industry: Utilities\n",
      "Shops    Industry: Retail\n",
      "Hlth     Industry: Health care\n",
      "Money    Industry: Finance\n",
      "Other    Industry: Other\n",
      "S1V1     Small firms, low value\n",
      "S1V3     Small firms, medium value\n",
      "S1V5     Small firms, high value\n",
      "S3V1     Size 3, value 1\n",
      "S3V3     Size 3, value 3\n",
      "S3V5     Size 3, value 5\n",
      "S5V1     Large firms, Low value\n",
      "S5V3     Large firms, medium value\n",
      "S5V5     Large Firms, High value\n",
      "S1M1     Small firms, losers\n",
      "S1M3     Small firms, neutral\n",
      "S1M5     Small firms, winners\n",
      "S3M1     Size 3, momentum 1\n",
      "S3M3     Size 3, momentum 3\n",
      "S3M5     Size 3, momentum 5\n",
      "S5M1     Large firms, losers\n",
      "S5M3     Large firms, neutral\n",
      "S5M5     Large firms, winners\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from linearmodels.datasets import french\n",
    "data = french.load()\n",
    "print(french.DESCR)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## First Syntax\n",
    "\n",
    "This example shows the first syntax.  The test portfolios are a combination of the industry, size-value, and size-momentum sorted portfolios.  The factors are the market, value and momentum factors.  This model is not adequate to price the assets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      LinearFactorModel Estimation Summary                      \n",
      "================================================================================\n",
      "No. Test Portfolios:                  6   R-squared:                      0.7198\n",
      "No. Factors:                          3   J-statistic:                    16.682\n",
      "No. Observations:                   819   P-value                         0.0008\n",
      "Date:                  Thu, May 11 2017   Distribution:                  chi2(3)\n",
      "Time:                          17:42:42                                         \n",
      "Cov. Estimator:                  kernel                                         \n",
      "                                                                                \n",
      "                            Risk Premia Estimates                             \n",
      "==============================================================================\n",
      "            Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "MktRF          0.0087     0.0013     6.9483     0.0000      0.0062      0.0111\n",
      "HML            0.0049     0.0013     3.8373     0.0001      0.0024      0.0074\n",
      "Mom            0.0088     0.0020     4.4517     0.0000      0.0049      0.0127\n",
      "==============================================================================\n",
      "\n",
      "See full_summary for complete results\n"
     ]
    }
   ],
   "source": [
    "from linearmodels.asset_pricing import LinearFactorModel, TradedFactorModel\n",
    "\n",
    "formula = 'NoDur + Chems + S1V1 + S5V5 + S1M1 + S5M5 ~ MktRF + HML + Mom'\n",
    "mod = LinearFactorModel.from_formula(formula, data)\n",
    "res = mod.fit(cov_type='kernel', kernel='parzen', bandwidth=20)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Second Syntax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      LinearFactorModel Estimation Summary                      \n",
      "================================================================================\n",
      "No. Test Portfolios:                 18   R-squared:                      0.7691\n",
      "No. Factors:                          3   J-statistic:                    93.053\n",
      "No. Observations:                   819   P-value                         0.0000\n",
      "Date:                  Thu, May 11 2017   Distribution:                 chi2(15)\n",
      "Time:                          17:01:49                                         \n",
      "Cov. Estimator:                  robust                                         \n",
      "                                                                                \n",
      "                            Risk Premia Estimates                             \n",
      "==============================================================================\n",
      "            Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "MktRF          0.0102     0.0017     6.0705     0.0000      0.0069      0.0134\n",
      "HML            0.0048     0.0010     4.6714     0.0000      0.0028      0.0068\n",
      "Mom            0.0085     0.0014     5.9594     0.0000      0.0057      0.0113\n",
      "==============================================================================\n",
      "\n",
      "See full_summary for complete results\n"
     ]
    }
   ],
   "source": [
    "ports = ['S{0}V{1}'.format(i, j) for i in (1,3,5) for j in (1,3,5)]\n",
    "ports += ['S{0}M{1}'.format(i, j) for i in (1,3,5) for j in (1,3,5)]\n",
    "portfolios = data[ports]\n",
    "formula = 'MktRF + HML + Mom'\n",
    "mod = LinearFactorModel.from_formula(formula, data, portfolios=portfolios)\n",
    "res = mod.fit()\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      LinearFactorModel Estimation Summary                      \n",
      "================================================================================\n",
      "No. Test Portfolios:                 18   R-squared:                      0.7691\n",
      "No. Factors:                          3   J-statistic:                    93.053\n",
      "No. Observations:                   819   P-value                         0.0000\n",
      "Date:                  Thu, May 11 2017   Distribution:                 chi2(15)\n",
      "Time:                          17:01:55                                         \n",
      "Cov. Estimator:                  robust                                         \n",
      "                                                                                \n",
      "                            Risk Premia Estimates                             \n",
      "==============================================================================\n",
      "            Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "MktRF          0.0102     0.0017     6.0705     0.0000      0.0069      0.0134\n",
      "HML            0.0048     0.0010     4.6714     0.0000      0.0028      0.0068\n",
      "Mom            0.0085     0.0014     5.9594     0.0000      0.0057      0.0113\n",
      "==============================================================================\n",
      "\n",
      "See full_summary for complete results\n"
     ]
    }
   ],
   "source": [
    "portfolios = data[ports]\n",
    "factors = data[['MktRF', 'HML', 'Mom']]\n",
    "mod = LinearFactorModel(portfolios, factors)\n",
    "print(mod.fit())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
